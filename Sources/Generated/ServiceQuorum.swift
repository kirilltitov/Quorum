/**
 * This file has been autogenerated by LGNC assembler on 2021-03-30 22:39:38 +0000 (1617143978.837122).
 * All changes will be lost on next assembly.
 */

import Foundation
import LGNCore
import LGNP
import LGNC
import LGNS
import Entita

public extension Services {
    enum Quorum: Service {
        public enum Contracts {}

        public static let transports: [LGNCore.Transport: Int] = [
            .LGNS: 1711,
            .HTTP: 8080,
        ]

        public static let info: [String: String] = [
            "foo": "bar",
        ]

        public static var guaranteeStatuses: [String: Bool] = [
            Contracts.DeleteComment.URI: Contracts.DeleteComment.isGuaranteed,
            Contracts.UndeleteComment.URI: Contracts.UndeleteComment.isGuaranteed,
            Contracts.HideComment.URI: Contracts.HideComment.isGuaranteed,
            Contracts.UnhideComment.URI: Contracts.UnhideComment.isGuaranteed,
            Contracts.ApproveComment.URI: Contracts.ApproveComment.isGuaranteed,
            Contracts.Comments.URI: Contracts.Comments.isGuaranteed,
            Contracts.CommentsCounters.URI: Contracts.CommentsCounters.isGuaranteed,
            Contracts.CreateComment.URI: Contracts.CreateComment.isGuaranteed,
            Contracts.EditComment.URI: Contracts.EditComment.isGuaranteed,
            Contracts.LikeComment.URI: Contracts.LikeComment.isGuaranteed,
            Contracts.PendingComments.URI: Contracts.PendingComments.isGuaranteed,
            Contracts.PendingCommentsCount.URI: Contracts.PendingCommentsCount.isGuaranteed,
            Contracts.RejectComment.URI: Contracts.RejectComment.isGuaranteed,
            Contracts.UpdateUserAccessLevel.URI: Contracts.UpdateUserAccessLevel.isGuaranteed,
            Contracts.UserInfo.URI: Contracts.UserInfo.isGuaranteed,
        ]

        public static let contractMap: [String: AnyContract.Type] = [
            Contracts.DeleteComment.URI: Contracts.DeleteComment.self,
            Contracts.UndeleteComment.URI: Contracts.UndeleteComment.self,
            Contracts.HideComment.URI: Contracts.HideComment.self,
            Contracts.UnhideComment.URI: Contracts.UnhideComment.self,
            Contracts.ApproveComment.URI: Contracts.ApproveComment.self,
            Contracts.Comments.URI: Contracts.Comments.self,
            Contracts.CommentsCounters.URI: Contracts.CommentsCounters.self,
            Contracts.CreateComment.URI: Contracts.CreateComment.self,
            Contracts.EditComment.URI: Contracts.EditComment.self,
            Contracts.LikeComment.URI: Contracts.LikeComment.self,
            Contracts.PendingComments.URI: Contracts.PendingComments.self,
            Contracts.PendingCommentsCount.URI: Contracts.PendingCommentsCount.self,
            Contracts.RejectComment.URI: Contracts.RejectComment.self,
            Contracts.UpdateUserAccessLevel.URI: Contracts.UpdateUserAccessLevel.self,
            Contracts.UserInfo.URI: Contracts.UserInfo.self,
        ]

        public static let keyDictionary: [String: Entita.Dict] = [
            "DeleteComment": [
                "Request": Contracts.DeleteComment.Request.keyDictionary,
                "Response": Contracts.DeleteComment.Response.keyDictionary,
            ],
            "UndeleteComment": [
                "Request": Contracts.UndeleteComment.Request.keyDictionary,
                "Response": Contracts.UndeleteComment.Response.keyDictionary,
            ],
            "HideComment": [
                "Request": Contracts.HideComment.Request.keyDictionary,
                "Response": Contracts.HideComment.Response.keyDictionary,
            ],
            "UnhideComment": [
                "Request": Contracts.UnhideComment.Request.keyDictionary,
                "Response": Contracts.UnhideComment.Response.keyDictionary,
            ],
            "ApproveComment": [
                "Request": Contracts.ApproveComment.Request.keyDictionary,
                "Response": Contracts.ApproveComment.Response.keyDictionary,
            ],
            "Comments": [
                "Request": Contracts.Comments.Request.keyDictionary,
                "Response": Contracts.Comments.Response.keyDictionary,
            ],
            "CommentsCounters": [
                "Request": Contracts.CommentsCounters.Request.keyDictionary,
                "Response": Contracts.CommentsCounters.Response.keyDictionary,
            ],
            "CreateComment": [
                "Request": Contracts.CreateComment.Request.keyDictionary,
                "Response": Contracts.CreateComment.Response.keyDictionary,
            ],
            "EditComment": [
                "Request": Contracts.EditComment.Request.keyDictionary,
                "Response": Contracts.EditComment.Response.keyDictionary,
            ],
            "LikeComment": [
                "Request": Contracts.LikeComment.Request.keyDictionary,
                "Response": Contracts.LikeComment.Response.keyDictionary,
            ],
            "PendingComments": [
                "Request": Contracts.PendingComments.Request.keyDictionary,
                "Response": Contracts.PendingComments.Response.keyDictionary,
            ],
            "PendingCommentsCount": [
                "Request": Contracts.PendingCommentsCount.Request.keyDictionary,
                "Response": Contracts.PendingCommentsCount.Response.keyDictionary,
            ],
            "RejectComment": [
                "Request": Contracts.RejectComment.Request.keyDictionary,
                "Response": Contracts.RejectComment.Response.keyDictionary,
            ],
            "UpdateUserAccessLevel": [
                "Request": Contracts.UpdateUserAccessLevel.Request.keyDictionary,
                "Response": Contracts.UpdateUserAccessLevel.Response.keyDictionary,
            ],
            "UserInfo": [
                "Request": Contracts.UserInfo.Request.keyDictionary,
                "Response": Contracts.UserInfo.Response.keyDictionary,
            ],
        ]
    }
}

public extension Services.Quorum.Contracts {
    typealias FieldMapping = Services.Shared.FieldMapping
    typealias ServiceFieldMapping = Services.Shared.ServiceFieldMapping
    typealias ServiceFieldMappings = Services.Shared.ServiceFieldMappings
    typealias CharacterInfo = Services.Shared.CharacterInfo
    typealias EventRequest = Services.Shared.EventRequest
    typealias UserSignupRequest = Services.Shared.UserSignupRequest
    typealias NodeInfo = Services.Shared.NodeInfo
    typealias PingRequest = Services.Shared.PingRequest
    typealias PingResponse = Services.Shared.PingResponse
    typealias CheckinRequest = Services.Shared.CheckinRequest
    typealias CheckinResponse = Services.Shared.CheckinResponse
    typealias LoginRequest = Services.Shared.LoginRequest
    typealias LoginResponse = Services.Shared.LoginResponse
    typealias CommentUserInfo = Services.Shared.CommentUserInfo
    typealias Comment = Services.Shared.Comment
    typealias User = Services.Shared.User

    enum DeleteComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "DeleteComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = [ .MsgPack ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }
    }

    enum UndeleteComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "UndeleteComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = [ .MsgPack ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }
    }

    enum HideComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "HideComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = [ .MsgPack ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }
    }

    enum UnhideComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "UnhideComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = [ .MsgPack ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }
    }

    enum ApproveComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "ApproveComment"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }
    }

    enum Comments: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "Comments"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = [ .MsgPack ]
        public static let isGETSafe = true

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            public let IDPost: String
            public let session: LGNC.Entity.Cookie?
            public let portal: LGNC.Entity.Cookie?
            public let author: LGNC.Entity.Cookie?

            public init(
                IDPost: String,
                session: LGNC.Entity.Cookie? = nil,
                portal: LGNC.Entity.Cookie? = nil,
                author: LGNC.Entity.Cookie? = nil
            ) {
                self.IDPost = IDPost
                self.session = session
                self.portal = portal
                self.author = author
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "IDPost",
                        "session",
                        "portal",
                        "author",
                    ]
                )

                let value_IDPost: String? = try? (self.extract(param: "IDPost", from: dictionary) as String)
                let value_session: LGNC.Entity.Cookie?? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie?? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie?? = try await self.extractCookie(param: "author", from: dictionary)

                let validatorClosures: [String: ValidationClosure] = [
                    "IDPost": {
                        guard let _ = value_IDPost else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "session": {
                        guard let value = value_session else {
                            throw Validation.Error.MissingValue()
                        }
                        if value == nil {
                            throw Validation.Error.SkipMissingOptionalValueValidators()
                        }

                    },
                    "portal": {
                        guard let value = value_portal else {
                            throw Validation.Error.MissingValue()
                        }
                        if value == nil {
                            throw Validation.Error.SkipMissingOptionalValueValidators()
                        }

                    },
                    "author": {
                        guard let value = value_author else {
                            throw Validation.Error.MissingValue()
                        }
                        if value == nil {
                            throw Validation.Error.SkipMissingOptionalValueValidators()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    IDPost: value_IDPost!,
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    IDPost: try Request.extract(param: "IDPost", from: dictionary),
                    session: try Request.extract(param: "session", from: dictionary, isOptional: true),
                    portal: try Request.extract(param: "portal", from: dictionary, isOptional: true),
                    author: try Request.extract(param: "author", from: dictionary, isOptional: true)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                ]
            }

        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let comments: [Services.Shared.Comment]

            public init(comments: [Services.Shared.Comment]) {
                self.comments = comments
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "comments",
                    ]
                )

                let value_comments: [Services.Shared.Comment]? = try? (self.extract(param: "comments", from: dictionary) as [Services.Shared.Comment])

                let validatorClosures: [String: ValidationClosure] = [
                    "comments": {
                        guard let _ = value_comments else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    comments: value_comments!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    comments: try Response.extract(param: "comments", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("comments"): try self.encode(self.comments),
                ]
            }

        }
    }

    enum CommentsCounters: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "CommentsCounters"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let IDs: [String]

            public init(IDs: [String]) {
                self.IDs = IDs
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "IDs",
                    ]
                )

                let value_IDs: [String]? = try? (self.extract(param: "IDs", from: dictionary) as [String])

                let validatorClosures: [String: ValidationClosure] = [
                    "IDs": {
                        guard let _ = value_IDs else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    IDs: value_IDs!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    IDs: try Request.extract(param: "IDs", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("IDs"): try self.encode(self.IDs),
                ]
            }

        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let counters: [String:Int]

            public init(counters: [String:Int]) {
                self.counters = counters
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "counters",
                    ]
                )

                let value_counters: [String:Int]? = try? (self.extract(param: "counters", from: dictionary) as [String:Int])

                let validatorClosures: [String: ValidationClosure] = [
                    "counters": {
                        guard let _ = value_counters else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    counters: value_counters!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    counters: try Response.extract(param: "counters", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("counters"): try self.encode(self.counters),
                ]
            }

        }
    }

    enum CreateComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "CreateComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDPostClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDPostAllowedValues>.Callback? = nil
            private static var validatorIDReplyCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDReplyCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDPostAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = String

                case PostNotFound = "Post not found"
                case PostIsReadOnly = "Post is read only"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .PostNotFound: return (code: 404, message: self.rawValue)
                        case .PostIsReadOnly: return (code: 403, message: self.rawValue)
                    }
                }
            }

            public enum CallbackValidatorIDReplyCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case ReplyingCommentNotFound = "Replying comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .ReplyingCommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDPost: String
            public let IDReplyComment: Int?
            public let body: String

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDPost: String,
                IDReplyComment: Int? = nil,
                body: String
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDPost = IDPost
                self.IDReplyComment = IDReplyComment
                self.body = body
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDPost",
                        "IDReplyComment",
                        "body",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDPost: String? = try? (self.extract(param: "IDPost", from: dictionary) as String)
                let value_IDReplyComment: Int?? = try? (self.extract(param: "IDReplyComment", from: dictionary, isOptional: true) as Int?)
                let value_body: String? = try? (self.extract(param: "body", from: dictionary) as String)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDPost": {
                        guard let _ = value_IDPost else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDPostClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDPostAllowedValues>(callback: validator).validate(value_IDPost!)
                        }
                    },
                    "IDReplyComment": {
                        guard let value = value_IDReplyComment else {
                            throw Validation.Error.MissingValue()
                        }
                        if value == nil {
                            throw Validation.Error.SkipMissingOptionalValueValidators()
                        }
                        if let unwrapped_value_IDReplyComment = value_IDReplyComment {
                                if let validator = self.validatorIDReplyCommentClosure {
                                    try await Validation.CallbackWithAllowedValues<CallbackValidatorIDReplyCommentAllowedValues>(callback: validator).validate(unwrapped_value_IDReplyComment!)
                                }
                        }
                    },
                    "body": {
                        guard let _ = value_body else {
                            throw Validation.Error.MissingValue()
                        }
                        try await Validation.Length.Min(length: 3, message: "Too short comment").validate(value_body!)
                    try await Validation.Length.Max(length: 4000, message: "Comment must be less than 4000 characters long").validate(value_body!)
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDPost: value_IDPost!,
                    IDReplyComment: value_IDReplyComment!,
                    body: value_body!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDPost: try Request.extract(param: "IDPost", from: dictionary),
                    IDReplyComment: try Request.extract(param: "IDReplyComment", from: dictionary, isOptional: true),
                    body: try Request.extract(param: "body", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                    self.getDictionaryKey("IDReplyComment"): try self.encode(self.IDReplyComment),
                    self.getDictionaryKey("body"): try self.encode(self.body),
                ]
            }

            public static func validateIDPost(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDPostAllowedValues>.Callback
            ) {
                self.validatorIDPostClosure = callback
            }

            public static func validateIDReplyComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDReplyCommentAllowedValues>.Callback
            ) {
                self.validatorIDReplyCommentClosure = callback
            }

        }
    }

    enum EditComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "EditComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = [ .MsgPack ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int
            public let body: String

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int,
                body: String
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
                self.body = body
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                        "body",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)
                let value_body: String? = try? (self.extract(param: "body", from: dictionary) as String)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                    "body": {
                        guard let _ = value_body else {
                            throw Validation.Error.MissingValue()
                        }
                        try await Validation.Length.Min(length: 3, message: "Too short comment").validate(value_body!)
                    try await Validation.Length.Max(length: 4000, message: "Comment must be less than 4000 characters long").validate(value_body!)
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!,
                    body: value_body!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary),
                    body: try Request.extract(param: "body", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                    self.getDictionaryKey("body"): try self.encode(self.body),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }
    }

    enum LikeComment: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "LikeComment"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let likes: Int

            public init(likes: Int) {
                self.likes = likes
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "likes",
                    ]
                )

                let value_likes: Int? = try? (self.extract(param: "likes", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "likes": {
                        guard let _ = value_likes else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    likes: value_likes!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    likes: try Response.extract(param: "likes", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("likes"): try self.encode(self.likes),
                ]
            }

        }
    }

    enum PendingComments: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "PendingComments"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases
        public static let isGETSafe = true

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie
            ) {
                self.session = session
                self.portal = portal
                self.author = author
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                ]
            }

        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let comments: [Services.Shared.Comment]

            public init(comments: [Services.Shared.Comment]) {
                self.comments = comments
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "comments",
                    ]
                )

                let value_comments: [Services.Shared.Comment]? = try? (self.extract(param: "comments", from: dictionary) as [Services.Shared.Comment])

                let validatorClosures: [String: ValidationClosure] = [
                    "comments": {
                        guard let _ = value_comments else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    comments: value_comments!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    comments: try Response.extract(param: "comments", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("comments"): try self.encode(self.comments),
                ]
            }

        }
    }

    enum PendingCommentsCount: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "PendingCommentsCount"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases
        public static let isGETSafe = true

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie
            ) {
                self.session = session
                self.portal = portal
                self.author = author
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                ]
            }

        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let count: Int

            public init(count: Int) {
                self.count = count
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "count",
                    ]
                )

                let value_count: Int? = try? (self.extract(param: "count", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "count": {
                        guard let _ = value_count else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    count: value_count!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    count: try Response.extract(param: "count", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("count"): try self.encode(self.count),
                ]
            }

        }
    }

    enum RejectComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "RejectComment"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            private static var validatorIDCommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback? = nil

            public enum CallbackValidatorIDCommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> ErrorTuple {
                    switch self {
                        case .CommentNotFound: return (code: 404, message: self.rawValue)
                    }
                }
            }

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDComment: Int

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDComment: Int
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDComment",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDComment: Int? = try? (self.extract(param: "IDComment", from: dictionary) as Int)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDComment": {
                        guard let _ = value_IDComment else {
                            throw Validation.Error.MissingValue()
                        }
                            if let validator = self.validatorIDCommentClosure {
                            try await Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>(callback: validator).validate(value_IDComment!)
                        }
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDComment: value_IDComment!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIDComment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIDCommentAllowedValues>.Callback
            ) {
                self.validatorIDCommentClosure = callback
            }

        }
    }

    enum UpdateUserAccessLevel: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "UpdateUserAccessLevel"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public static let hasCookieFields: Bool = true

            public let session: LGNC.Entity.Cookie
            public let portal: LGNC.Entity.Cookie
            public let author: LGNC.Entity.Cookie
            public let IDUser: String
            public let accessLevel: String

            public init(
                session: LGNC.Entity.Cookie,
                portal: LGNC.Entity.Cookie,
                author: LGNC.Entity.Cookie,
                IDUser: String,
                accessLevel: String
            ) {
                self.session = session
                self.portal = portal
                self.author = author
                self.IDUser = IDUser
                self.accessLevel = accessLevel
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "session",
                        "portal",
                        "author",
                        "IDUser",
                        "accessLevel",
                    ]
                )

                let value_session: LGNC.Entity.Cookie? = try await self.extractCookie(param: "session", from: dictionary)
                let value_portal: LGNC.Entity.Cookie? = try await self.extractCookie(param: "portal", from: dictionary)
                let value_author: LGNC.Entity.Cookie? = try await self.extractCookie(param: "author", from: dictionary)
                let value_IDUser: String? = try? (self.extract(param: "IDUser", from: dictionary) as String)
                let value_accessLevel: String? = try? (self.extract(param: "accessLevel", from: dictionary) as String)

                let validatorClosures: [String: ValidationClosure] = [
                    "session": {
                        guard let _ = value_session else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "portal": {
                        guard let _ = value_portal else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "author": {
                        guard let _ = value_author else {
                            throw Validation.Error.MissingValue()
                        }

                    },
                    "IDUser": {
                        guard let _ = value_IDUser else {
                            throw Validation.Error.MissingValue()
                        }
                        try await Validation.UUID().validate(value_IDUser!)
                    },
                    "accessLevel": {
                        guard let _ = value_accessLevel else {
                            throw Validation.Error.MissingValue()
                        }
                        try await Validation.In(allowedValues: ["User", "PowerUser", "Moderator", "Admin"]).validate(value_accessLevel!)
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    session: value_session!,
                    portal: value_portal!,
                    author: value_author!,
                    IDUser: value_IDUser!,
                    accessLevel: value_accessLevel!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    session: try Request.extract(param: "session", from: dictionary),
                    portal: try Request.extract(param: "portal", from: dictionary),
                    author: try Request.extract(param: "author", from: dictionary),
                    IDUser: try Request.extract(param: "IDUser", from: dictionary),
                    accessLevel: try Request.extract(param: "accessLevel", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("session"): try self.encode(self.session),
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("author"): try self.encode(self.author),
                    self.getDictionaryKey("IDUser"): try self.encode(self.IDUser),
                    self.getDictionaryKey("accessLevel"): try self.encode(self.accessLevel),
                ]
            }

        }
    }

    enum UserInfo: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "UserInfo"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeBody: Optional<CanonicalGuaranteeBody> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.allCases
        public static let isGETSafe = true

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let IDUser: String

            public init(IDUser: String) {
                self.IDUser = IDUser
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "IDUser",
                    ]
                )

                let value_IDUser: String? = try? (self.extract(param: "IDUser", from: dictionary) as String)

                let validatorClosures: [String: ValidationClosure] = [
                    "IDUser": {
                        guard let _ = value_IDUser else {
                            throw Validation.Error.MissingValue()
                        }
                        try await Validation.UUID().validate(value_IDUser!)
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    IDUser: value_IDUser!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    IDUser: try Request.extract(param: "IDUser", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("IDUser"): try self.encode(self.IDUser),
                ]
            }

        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [:]

            public let accessLevel: String

            public init(accessLevel: String) {
                self.accessLevel = accessLevel
            }

            public static func initWithValidation(from dictionary: Entita.Dict) async throws -> Self {
                try self.ensureNecessaryItems(
                    in: dictionary,
                    necessaryItems: [
                        "accessLevel",
                    ]
                )

                let value_accessLevel: String? = try? (self.extract(param: "accessLevel", from: dictionary) as String)

                let validatorClosures: [String: ValidationClosure] = [
                    "accessLevel": {
                        guard let _ = value_accessLevel else {
                            throw Validation.Error.MissingValue()
                        }
                        try await Validation.In(allowedValues: ["User", "PowerUser", "Moderator", "Admin"]).validate(value_accessLevel!)
                    },
                ]

                let validationErrors = await self.reduce(closures: validatorClosures)
                guard validationErrors.isEmpty else {
                    throw LGNC.E.DecodeError(validationErrors)
                }

                return self.init(
                    accessLevel: value_accessLevel!
                )
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    accessLevel: try Response.extract(param: "accessLevel", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                [
                    self.getDictionaryKey("accessLevel"): try self.encode(self.accessLevel),
                ]
            }

        }
    }
}