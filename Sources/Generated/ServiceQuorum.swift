/**
 * This file has been autogenerated by LGNC assembler on 2019-06-30 00:40:19.732451.
 * All changes will be lost on next assembly.
 */

import Entita
import Foundation
import LGNC
import LGNCore
import LGNP
import LGNS
import NIO

public extension Services {
    enum Quorum: Service {
        public enum Contracts {}

        public static let transports: [LGNCore.Transport: Int] = [
            .LGNS: 1711,
            .HTTP: 8080,
        ]

        public static let info: [String: String] = [
            "foo": "bar",
        ]
        public static var guaranteeStatuses: [String: Bool] = [
            Contracts.DeleteComment.URI: Contracts.DeleteComment.isGuaranteed,
            Contracts.UndeleteComment.URI: Contracts.UndeleteComment.isGuaranteed,
            Contracts.HideComment.URI: Contracts.HideComment.isGuaranteed,
            Contracts.UnhideComment.URI: Contracts.UnhideComment.isGuaranteed,
            Contracts.ApproveComment.URI: Contracts.ApproveComment.isGuaranteed,
            Contracts.Comments.URI: Contracts.Comments.isGuaranteed,
            Contracts.CreateComment.URI: Contracts.CreateComment.isGuaranteed,
            Contracts.EditComment.URI: Contracts.EditComment.isGuaranteed,
            Contracts.LikeComment.URI: Contracts.LikeComment.isGuaranteed,
            Contracts.PendingComments.URI: Contracts.PendingComments.isGuaranteed,
            Contracts.PendingCommentsCount.URI: Contracts.PendingCommentsCount.isGuaranteed,
            Contracts.RejectComment.URI: Contracts.RejectComment.isGuaranteed,
        ]

        public static let contractMap: [String: SomeContract.Type] = [
            Contracts.DeleteComment.URI: Contracts.DeleteComment.self,
            Contracts.UndeleteComment.URI: Contracts.UndeleteComment.self,
            Contracts.HideComment.URI: Contracts.HideComment.self,
            Contracts.UnhideComment.URI: Contracts.UnhideComment.self,
            Contracts.ApproveComment.URI: Contracts.ApproveComment.self,
            Contracts.Comments.URI: Contracts.Comments.self,
            Contracts.CreateComment.URI: Contracts.CreateComment.self,
            Contracts.EditComment.URI: Contracts.EditComment.self,
            Contracts.LikeComment.URI: Contracts.LikeComment.self,
            Contracts.PendingComments.URI: Contracts.PendingComments.self,
            Contracts.PendingCommentsCount.URI: Contracts.PendingCommentsCount.self,
            Contracts.RejectComment.URI: Contracts.RejectComment.self,
        ]

        public static let keyDictionary: [String: Entita.Dict] = [
            "DeleteComment": [
                "Request": Contracts.DeleteComment.Request.keyDictionary,
                "Response": Contracts.DeleteComment.Response.keyDictionary,
            ],
            "UndeleteComment": [
                "Request": Contracts.UndeleteComment.Request.keyDictionary,
                "Response": Contracts.UndeleteComment.Response.keyDictionary,
            ],
            "HideComment": [
                "Request": Contracts.HideComment.Request.keyDictionary,
                "Response": Contracts.HideComment.Response.keyDictionary,
            ],
            "UnhideComment": [
                "Request": Contracts.UnhideComment.Request.keyDictionary,
                "Response": Contracts.UnhideComment.Response.keyDictionary,
            ],
            "ApproveComment": [
                "Request": Contracts.ApproveComment.Request.keyDictionary,
                "Response": Contracts.ApproveComment.Response.keyDictionary,
            ],
            "Comments": [
                "Request": Contracts.Comments.Request.keyDictionary,
                "Response": Contracts.Comments.Response.keyDictionary,
            ],
            "CreateComment": [
                "Request": Contracts.CreateComment.Request.keyDictionary,
                "Response": Contracts.CreateComment.Response.keyDictionary,
            ],
            "EditComment": [
                "Request": Contracts.EditComment.Request.keyDictionary,
                "Response": Contracts.EditComment.Response.keyDictionary,
            ],
            "LikeComment": [
                "Request": Contracts.LikeComment.Request.keyDictionary,
                "Response": Contracts.LikeComment.Response.keyDictionary,
            ],
            "PendingComments": [
                "Request": Contracts.PendingComments.Request.keyDictionary,
                "Response": Contracts.PendingComments.Response.keyDictionary,
            ],
            "PendingCommentsCount": [
                "Request": Contracts.PendingCommentsCount.Request.keyDictionary,
                "Response": Contracts.PendingCommentsCount.Response.keyDictionary,
            ],
            "RejectComment": [
                "Request": Contracts.RejectComment.Request.keyDictionary,
                "Response": Contracts.RejectComment.Response.keyDictionary,
            ],
        ]
    }
}

public extension Services.Quorum.Contracts {
    typealias FieldMapping = Services.Shared.FieldMapping
    typealias ServiceFieldMapping = Services.Shared.ServiceFieldMapping
    typealias ServiceFieldMappings = Services.Shared.ServiceFieldMappings
    typealias CharacterInfo = Services.Shared.CharacterInfo
    typealias EventRequest = Services.Shared.EventRequest
    typealias UserSignupRequest = Services.Shared.UserSignupRequest
    typealias NodeInfo = Services.Shared.NodeInfo
    typealias PingRequest = Services.Shared.PingRequest
    typealias PingResponse = Services.Shared.PingResponse
    typealias CheckinRequest = Services.Shared.CheckinRequest
    typealias CheckinResponse = Services.Shared.CheckinResponse
    typealias LoginRequest = Services.Shared.LoginRequest
    typealias LoginResponse = Services.Shared.LoginResponse
    typealias CommentUserInfo = Services.Shared.CommentUserInfo
    typealias Empty = Services.Shared.Empty
    typealias Comment = Services.Shared.Comment
    typealias User = Services.Shared.User

    enum DeleteComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "DeleteComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = [
            .MsgPack,
        ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                :
            ]

            public let token: String
            public let IDComment: Int

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int
            ) {
                self.token = token
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                ]

                var _token: String!
                var _IDComment: Int!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }

    enum UndeleteComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "UndeleteComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = [
            .MsgPack,
        ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                :
            ]

            public let token: String
            public let IDComment: Int

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int
            ) {
                self.token = token
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                ]

                var _token: String!
                var _IDComment: Int!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }

    enum HideComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "HideComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = [
            .MsgPack,
        ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                :
            ]

            public let token: String
            public let IDComment: Int

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int
            ) {
                self.token = token
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                ]

                var _token: String!
                var _IDComment: Int!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }

    enum UnhideComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "UnhideComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = [
            .MsgPack,
        ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                :
            ]

            public let token: String
            public let IDComment: Int

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int
            ) {
                self.token = token
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                ]

                var _token: String!
                var _IDComment: Int!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }

    enum ApproveComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "ApproveComment"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                :
            ]

            public let token: String
            public let IDComment: Int

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int
            ) {
                self.token = token
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                ]

                var _token: String!
                var _IDComment: Int!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }

    enum Comments: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "Comments"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = [
            .MsgPack,
        ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "IDPost": "b",
                "token": "c",
            ]

            public let IDPost: Int
            public let token: String?

            public init(
                IDPost: Int,
                token: String? = nil
            ) {
                self.IDPost = IDPost
                self.token = token
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "IDPost": [],
                    "token": [],
                ]

                var _IDPost: Int!
                var _token: String?

                do {
                    do {
                        _IDPost = try Request.extract(param: "IDPost", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDPost"]!.append(eventLoop.makeSucceededFuture(("IDPost", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _token = try Request.extract(param: "token", from: dictionary, isOptional: true)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            IDPost: _IDPost,
                            token: _token
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    IDPost: try Request.extract(param: "IDPost", from: dictionary),
                    token: try Request.extract(param: "token", from: dictionary, isOptional: true)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                    self.getDictionaryKey("token"): try self.encode(self.token),
                ]
            }
        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "comments": "b",
            ]

            public let comments: [Comment]

            public init(
                comments: [Comment]
            ) {
                self.comments = comments
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Response> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "comments": [],
                ]

                var _comments: [Comment]!

                do {
                    do {
                        _comments = try Response.extract(param: "comments", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["comments"]!.append(eventLoop.makeSucceededFuture(("comments", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            comments: _comments
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    comments: try Response.extract(param: "comments", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("comments"): try self.encode(self.comments),
                ]
            }
        }
    }

    enum CreateComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "CreateComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdpostAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case PostNotFound = "Post not found"
                case PostIsReadOnly = "Post is read only"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .PostNotFound: return (message: self.rawValue, code: 404)
                    case .PostIsReadOnly: return (message: self.rawValue, code: 403)
                    }
                }
            }

            public enum CallbackValidatorIdreplycommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case ReplyingCommentNotFound = "Replying comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .ReplyingCommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "token": "b",
                "IDPost": "c",
                "IDReplyComment": "d",
                "body": "e",
            ]

            public let token: String
            public let IDPost: Int
            public let IDReplyComment: Int?
            public let body: String

            private static var validatorIdpostClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback?
            private static var validatorIdreplycommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdreplycommentAllowedValues>.Callback?

            public init(
                token: String,
                IDPost: Int,
                IDReplyComment: Int? = nil,
                body: String
            ) {
                self.token = token
                self.IDPost = IDPost
                self.IDReplyComment = IDReplyComment
                self.body = body
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDPost": [],
                    "IDReplyComment": [],
                    "body": [],
                ]

                var _token: String!
                var _IDPost: Int!
                var _IDReplyComment: Int?
                var _body: String!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                    do {
                        _IDPost = try Request.extract(param: "IDPost", from: dictionary)

                        if let validatorIdpostClosure = self.validatorIdpostClosure {
                            validatorFutures["IDPost"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>(callback: validatorIdpostClosure).validate(
                                    _IDPost,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDPost", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDPost"]!.append(eventLoop.makeSucceededFuture(("IDPost", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _IDReplyComment = try Request.extract(param: "IDReplyComment", from: dictionary, isOptional: true)

                        if let _IDReplyComment = _IDReplyComment, let validatorIdreplycommentClosure = self.validatorIdreplycommentClosure {
                            validatorFutures["IDReplyComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdreplycommentAllowedValues>(callback: validatorIdreplycommentClosure).validate(
                                    _IDReplyComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDReplyComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDReplyComment"]!.append(eventLoop.makeSucceededFuture(("IDReplyComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _body = try Request.extract(param: "body", from: dictionary)

                        if let error = Validation.Length.Min(length: 3, message: "Too short comment").validate(_body, requestInfo.locale) {
                            validatorFutures["body"]!.append(eventLoop.makeSucceededFuture(("body", error)))
                        }

                        if let error = Validation.Length.Max(length: 4000, message: "Comment must be less than {Length} characters long").validate(_body, requestInfo.locale) {
                            validatorFutures["body"]!.append(eventLoop.makeSucceededFuture(("body", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["body"]!.append(eventLoop.makeSucceededFuture(("body", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDPost: _IDPost,
                            IDReplyComment: _IDReplyComment,
                            body: _body
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDPost: try Request.extract(param: "IDPost", from: dictionary),
                    IDReplyComment: try Request.extract(param: "IDReplyComment", from: dictionary, isOptional: true),
                    body: try Request.extract(param: "body", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                    self.getDictionaryKey("IDReplyComment"): try self.encode(self.IDReplyComment),
                    self.getDictionaryKey("body"): try self.encode(self.body),
                ]
            }

            public static func validateIdpost(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback
            ) {
                self.validatorIdpostClosure = callback
            }

            public static func validateIdreplycomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdreplycommentAllowedValues>.Callback
            ) {
                self.validatorIdreplycommentClosure = callback
            }
        }
    }

    enum EditComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "EditComment"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = [
            .MsgPack,
        ]

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "token": "b",
                "IDComment": "c",
                "body": "d",
            ]

            public let token: String
            public let IDComment: Int
            public let body: String

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int,
                body: String
            ) {
                self.token = token
                self.IDComment = IDComment
                self.body = body
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                    "body": [],
                ]

                var _token: String!
                var _IDComment: Int!
                var _body: String!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _body = try Request.extract(param: "body", from: dictionary)

                        if let error = Validation.Length.Min(length: 3, message: "Too short comment").validate(_body, requestInfo.locale) {
                            validatorFutures["body"]!.append(eventLoop.makeSucceededFuture(("body", error)))
                        }

                        if let error = Validation.Length.Max(length: 4000, message: "Comment must be less than {Length} characters long").validate(_body, requestInfo.locale) {
                            validatorFutures["body"]!.append(eventLoop.makeSucceededFuture(("body", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["body"]!.append(eventLoop.makeSucceededFuture(("body", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment,
                            body: _body
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary),
                    body: try Request.extract(param: "body", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                    self.getDictionaryKey("body"): try self.encode(self.body),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }

    enum LikeComment: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "LikeComment"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "token": "b",
                "IDComment": "c",
            ]

            public let token: String
            public let IDComment: Int

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int
            ) {
                self.token = token
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                ]

                var _token: String!
                var _IDComment: Int!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "likes": "b",
            ]

            public let likes: Int

            public init(
                likes: Int
            ) {
                self.likes = likes
            }

            public static func await(
                likes likesFuture: Future<Int>
            ) -> Future<Response> {
                return likesFuture.eventLoop.makeSucceededFuture(()).flatMap { () in
                    likesFuture.map { likes in likes }
                }
                .map { likes in
                    Response(
                        likes: likes
                    )
                }
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Response> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "likes": [],
                ]

                var _likes: Int!

                do {
                    do {
                        _likes = try Response.extract(param: "likes", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["likes"]!.append(eventLoop.makeSucceededFuture(("likes", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            likes: _likes
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    likes: try Response.extract(param: "likes", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("likes"): try self.encode(self.likes),
                ]
            }
        }
    }

    enum PendingComments: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "PendingComments"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "token": "b",
            ]

            public let token: String

            public init(
                token: String
            ) {
                self.token = token
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                ]

                var _token: String!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                ]
            }
        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "comments": "b",
            ]

            public let comments: [Comment]

            public init(
                comments: [Comment]
            ) {
                self.comments = comments
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Response> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "comments": [],
                ]

                var _comments: [Comment]!

                do {
                    do {
                        _comments = try Response.extract(param: "comments", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["comments"]!.append(eventLoop.makeSucceededFuture(("comments", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            comments: _comments
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    comments: try Response.extract(param: "comments", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("comments"): try self.encode(self.comments),
                ]
            }
        }
    }

    enum PendingCommentsCount: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "PendingCommentsCount"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "token": "b",
            ]

            public let token: String

            public init(
                token: String
            ) {
                self.token = token
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                ]

                var _token: String!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale, message: "Not authorized", code: 403))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                ]
            }
        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "count": "b",
            ]

            public let count: Int

            public init(
                count: Int
            ) {
                self.count = count
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Response> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "count": [],
                ]

                var _count: Int!

                do {
                    do {
                        _count = try Response.extract(param: "count", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["count"]!.append(eventLoop.makeSucceededFuture(("count", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            count: _count
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    count: try Response.extract(param: "count", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("count"): try self.encode(self.count),
                ]
            }
        }
    }

    enum RejectComment: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "RejectComment"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                :
            ]

            public let token: String
            public let IDComment: Int

            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDComment: Int
            ) {
                self.token = token
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDComment": [],
                ]

                var _token: String!
                var _IDComment: Int!

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    _IDComment,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.makeSucceededFuture(("IDComment", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            IDComment: _IDComment
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }
}
