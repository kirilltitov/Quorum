/**
 * This file has been autogenerated by LGNC assembler on 2019-01-15 22:43:10.826793.
 * All changes will be lost on next assembly.
 */

import Entita
import Foundation
import LGNC
import LGNCore
import LGNP
import LGNS
import NIO

public extension Services {
    public struct Quorum: Service {
        public static let transports: [LGNC.Transport: Int] = [
            .LGNS: 1711,
            .HTTP: 8080,
        ]

        public struct Contracts {}

        public static let info: [String: String] = [
            "foo": "bar",
        ]

        public static let contractMap: Contract.Map = [
            Contracts.Create.URI: (transports: Contracts.Create.transports, executor: Quorum.contractCreate),
            Contracts.Comments.URI: (transports: Contracts.Comments.transports, executor: Quorum.contractComments),
            Contracts.Edit.URI: (transports: Contracts.Edit.transports, executor: Quorum.contractEdit),
            Contracts.Delete.URI: (transports: Contracts.Delete.transports, executor: Quorum.contractDelete),
        ]

        private static var contractCreateCallback: Contracts.Create.NormalizedCallback!
        private static var contractCommentsCallback: Contracts.Comments.NormalizedCallback!
        private static var contractEditCallback: Contracts.Edit.NormalizedCallback!
        private static var contractDeleteCallback: Contracts.Delete.NormalizedCallback!

        public static func guaranteeCreateContract(_ callback: @escaping Contracts.Create.Callback) {
            self.contractCreateCallback = Contracts.Create.normalize(callback: callback)
        }

        public static func guaranteeCreateContract(_ callback: @escaping Contracts.Create.NonFutureCallback) {
            self.guaranteeCreateContract(Contracts.Create.futurize(callback: callback))
        }

        public static func guaranteeCommentsContract(_ callback: @escaping Contracts.Comments.Callback) {
            self.contractCommentsCallback = Contracts.Comments.normalize(callback: callback)
        }

        public static func guaranteeCommentsContract(_ callback: @escaping Contracts.Comments.NonFutureCallback) {
            self.guaranteeCommentsContract(Contracts.Comments.futurize(callback: callback))
        }

        public static func guaranteeEditContract(_ callback: @escaping Contracts.Edit.Callback) {
            self.contractEditCallback = Contracts.Edit.normalize(callback: callback)
        }

        public static func guaranteeEditContract(_ callback: @escaping Contracts.Edit.NonFutureCallback) {
            self.guaranteeEditContract(Contracts.Edit.futurize(callback: callback))
        }

        public static func guaranteeDeleteContract(_ callback: @escaping Contracts.Delete.Callback) {
            self.contractDeleteCallback = Contracts.Delete.normalize(callback: callback)
        }

        public static func guaranteeDeleteContract(_ callback: @escaping Contracts.Delete.NonFutureCallback) {
            self.guaranteeDeleteContract(Contracts.Delete.futurize(callback: callback))
        }

        public static func executeCreateContract(
            at address: Address,
            with request: Contracts.Create.Request,
            using client: LGNS.Client,
            controlBitmask: LGNP.Message.ControlBitmask = .defaultValues,
            uuid: UUID = UUID()
        ) -> Future<Contracts.Create.Response> {
            return Contracts.Create.execute(at: address, with: request, using: client, controlBitmask: controlBitmask, uuid: uuid)
        }

        public static func executeCommentsContract(
            at address: Address,
            with request: Contracts.Comments.Request,
            using client: LGNS.Client,
            controlBitmask: LGNP.Message.ControlBitmask = .defaultValues,
            uuid: UUID = UUID()
        ) -> Future<Contracts.Comments.Response> {
            return Contracts.Comments.execute(at: address, with: request, using: client, controlBitmask: controlBitmask, uuid: uuid)
        }

        public static func executeEditContract(
            at address: Address,
            with request: Contracts.Edit.Request,
            using client: LGNS.Client,
            controlBitmask: LGNP.Message.ControlBitmask = .defaultValues,
            uuid: UUID = UUID()
        ) -> Future<Contracts.Edit.Response> {
            return Contracts.Edit.execute(at: address, with: request, using: client, controlBitmask: controlBitmask, uuid: uuid)
        }

        public static func executeDeleteContract(
            at address: Address,
            with request: Contracts.Delete.Request,
            using client: LGNS.Client,
            controlBitmask: LGNP.Message.ControlBitmask = .defaultValues,
            uuid: UUID = UUID()
        ) -> Future<Contracts.Delete.Response> {
            return Contracts.Delete.execute(at: address, with: request, using: client, controlBitmask: controlBitmask, uuid: uuid)
        }

        private static func contractCreate(requestInfo: LGNC.RequestInfo, parsedDict: Entita.Dict) -> Future<Entity> {
            return Contracts.Create._invoke(with: self.contractCreateCallback, request: parsedDict, requestInfo: requestInfo, name: "Create")
        }

        private static func contractComments(requestInfo: LGNC.RequestInfo, parsedDict: Entita.Dict) -> Future<Entity> {
            return Contracts.Comments._invoke(with: self.contractCommentsCallback, request: parsedDict, requestInfo: requestInfo, name: "Comments")
        }

        private static func contractEdit(requestInfo: LGNC.RequestInfo, parsedDict: Entita.Dict) -> Future<Entity> {
            return Contracts.Edit._invoke(with: self.contractEditCallback, request: parsedDict, requestInfo: requestInfo, name: "Edit")
        }

        private static func contractDelete(requestInfo: LGNC.RequestInfo, parsedDict: Entita.Dict) -> Future<Entity> {
            return Contracts.Delete._invoke(with: self.contractDeleteCallback, request: parsedDict, requestInfo: requestInfo, name: "Delete")
        }

        public static func validateContractCreateFieldToken(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Create.Request.CallbackValidatorTokenAllowedValues>.Callback
        ) {
            Contracts.Create.Request.validateToken(callback)
        }

        public static func validateContractCreateFieldIdpost(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Create.Request.CallbackValidatorIdpostAllowedValues>.Callback
        ) {
            Contracts.Create.Request.validateIdpost(callback)
        }

        public static func validateContractCreateFieldIdreplycomment(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Create.Request.CallbackValidatorIdreplycommentAllowedValues>.Callback
        ) {
            Contracts.Create.Request.validateIdreplycomment(callback)
        }

        public static func validateContractCommentsFieldIdpost(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Comments.Request.CallbackValidatorIdpostAllowedValues>.Callback
        ) {
            Contracts.Comments.Request.validateIdpost(callback)
        }

        public static func validateContractEditFieldToken(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Edit.Request.CallbackValidatorTokenAllowedValues>.Callback
        ) {
            Contracts.Edit.Request.validateToken(callback)
        }

        public static func validateContractEditFieldIdpost(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Edit.Request.CallbackValidatorIdpostAllowedValues>.Callback
        ) {
            Contracts.Edit.Request.validateIdpost(callback)
        }

        public static func validateContractEditFieldIdcomment(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Edit.Request.CallbackValidatorIdcommentAllowedValues>.Callback
        ) {
            Contracts.Edit.Request.validateIdcomment(callback)
        }

        public static func validateContractDeleteFieldToken(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Delete.Request.CallbackValidatorTokenAllowedValues>.Callback
        ) {
            Contracts.Delete.Request.validateToken(callback)
        }

        public static func validateContractDeleteFieldIdpost(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Delete.Request.CallbackValidatorIdpostAllowedValues>.Callback
        ) {
            Contracts.Delete.Request.validateIdpost(callback)
        }

        public static func validateContractDeleteFieldIdcomment(
            _ callback: @escaping Validation.CallbackWithAllowedValues<Contracts.Delete.Request.CallbackValidatorIdcommentAllowedValues>.Callback
        ) {
            Contracts.Delete.Request.validateIdcomment(callback)
        }

        public static func checkContractsCallbacks() -> Bool {
            var result = true

            if self.contractCreateCallback == nil {
                LGNCore.log("Contract 'Create' is not guaranteed")
                result = false
            }

            if self.contractCommentsCallback == nil {
                LGNCore.log("Contract 'Comments' is not guaranteed")
                result = false
            }

            if self.contractEditCallback == nil {
                LGNCore.log("Contract 'Edit' is not guaranteed")
                result = false
            }

            if self.contractDeleteCallback == nil {
                LGNCore.log("Contract 'Delete' is not guaranteed")
                result = false
            }

            return result
        }

        public static let keyDictionary: [String: Entita.Dict] = [
            "Create": [
                "Request": Contracts.Create.Request.keyDictionary,
                "Response": Contracts.Create.Response.keyDictionary,
            ],
            "Comments": [
                "Request": Contracts.Comments.Request.keyDictionary,
                "Response": Contracts.Comments.Response.keyDictionary,
            ],
            "Edit": [
                "Request": Contracts.Edit.Request.keyDictionary,
                "Response": Contracts.Edit.Response.keyDictionary,
            ],
            "Delete": [
                "Request": Contracts.Delete.Request.keyDictionary,
                "Response": Contracts.Delete.Response.keyDictionary,
            ],
        ]
    }
}

public extension Services.Quorum.Contracts {
    public typealias FieldMapping = Services.Shared.FieldMapping
    public typealias ServiceFieldMapping = Services.Shared.ServiceFieldMapping
    public typealias ServiceFieldMappings = Services.Shared.ServiceFieldMappings
    public typealias CharacterInfo = Services.Shared.CharacterInfo
    public typealias UserSignupRequest = Services.Shared.UserSignupRequest
    public typealias UserSignupResponse = Services.Shared.UserSignupResponse
    public typealias NodeInfo = Services.Shared.NodeInfo
    public typealias PingRequest = Services.Shared.PingRequest
    public typealias PingResponse = Services.Shared.PingResponse
    public typealias CheckinRequest = Services.Shared.CheckinRequest
    public typealias CheckinResponse = Services.Shared.CheckinResponse
    public typealias LoginRequest = Services.Shared.LoginRequest
    public typealias LoginResponse = Services.Shared.LoginResponse
    public typealias CommentUserInfo = Services.Shared.CommentUserInfo
    public typealias Comment = Services.Shared.Comment
    public typealias Empty = Services.Shared.Empty
    public typealias User = Services.Shared.User

    public struct Create: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "Create"
        public static let visibility: ContractVisibility = .Private
        public static let transports: [LGNC.Transport] = [.LGNS, .HTTP]
        public static let contentTypes: [Services.ContentType] = Services.ContentType.all

        public static func guarantee(_ callback: @escaping Callback) {
            Services.Quorum.guaranteeCreateContract(callback)
        }

        public static func guarantee(_ callback: @escaping NonFutureCallback) {
            Services.Quorum.guaranteeCreateContract(callback)
        }

        public final class Request: ContractEntity {
            public enum CallbackValidatorTokenAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = String

                case YouAreNotAuthorized = "You are not authorized"
                case YouAreForbiddenToLeaveCommentsHere = "You are forbidden to leave comments here"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .YouAreNotAuthorized: return (message: self.rawValue, code: 401)
                    case .YouAreForbiddenToLeaveCommentsHere: return (message: self.rawValue, code: 403)
                    }
                }
            }

            public enum CallbackValidatorIdpostAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case PostNotFound = "Post not found"
                case PostIsReadOnly = "Post is read only"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .PostNotFound: return (message: self.rawValue, code: 404)
                    case .PostIsReadOnly: return (message: self.rawValue, code: 403)
                    }
                }
            }

            public enum CallbackValidatorIdreplycommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case ReplyingCommentNotFound = "Replying comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .ReplyingCommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "token": "b",
                "IDPost": "c",
                "IDReplyComment": "d",
                "body": "e",
            ]

            public let token: String
            public let IDPost: Int
            public let IDReplyComment: Int?
            public let body: String

            private static var validatorTokenClosure: Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>.Callback?
            private static var validatorIdpostClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback?
            private static var validatorIdreplycommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdreplycommentAllowedValues>.Callback?

            public init(
                token: String,
                IDPost: Int,
                IDReplyComment: Int? = nil,
                body: String
            ) {
                self.token = token
                self.IDPost = IDPost
                self.IDReplyComment = IDReplyComment
                self.body = body
            }

            public static func initWithValidation(from dictionary: Entita.Dict, on eventLoop: EventLoop) -> Future<Request> {
                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDPost": [],
                    "IDReplyComment": [],
                    "body": [],
                ]

                var _token: String = String()
                var _IDPost: Int = Int()
                var _IDReplyComment: Int?
                var _body: String = String()

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)

                        if let validatorTokenClosure = self.validatorTokenClosure {
                            validatorFutures["token"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>(callback: validatorTokenClosure).validate(
                                    input: _token,
                                    on: eventLoop
                                ).map { ("token", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.newSucceededFuture(result: ("token", Validation.Error.MissingValue())))
                    }
                    do {
                        _IDPost = try Request.extract(param: "IDPost", from: dictionary)

                        if let validatorIdpostClosure = self.validatorIdpostClosure {
                            validatorFutures["IDPost"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>(callback: validatorIdpostClosure).validate(
                                    input: _IDPost,
                                    on: eventLoop
                                ).map { ("IDPost", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDPost"]!.append(eventLoop.newSucceededFuture(result: ("IDPost", Validation.Error.MissingValue())))
                    }
                    do {
                        _IDReplyComment = try Request.extract(param: "IDReplyComment", from: dictionary, isOptional: true)

                        if let _IDReplyComment = _IDReplyComment, let validatorIdreplycommentClosure = self.validatorIdreplycommentClosure {
                            validatorFutures["IDReplyComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdreplycommentAllowedValues>(callback: validatorIdreplycommentClosure).validate(
                                    input: _IDReplyComment,
                                    on: eventLoop
                                ).map { ("IDReplyComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDReplyComment"]!.append(eventLoop.newSucceededFuture(result: ("IDReplyComment", Validation.Error.MissingValue())))
                    }
                    do {
                        _body = try Request.extract(param: "body", from: dictionary)

                        if let error = Validation.Length.Min(length: 3, message: "Too short comment").validate(input: _body) {
                            validatorFutures["body"]!.append(eventLoop.newSucceededFuture(result: ("body", error)))
                        }

                        if let error = Validation.Length.Max(length: 4000, message: "Comment must be less than 4000 characters long").validate(input: _body) {
                            validatorFutures["body"]!.append(eventLoop.newSucceededFuture(result: ("body", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["body"]!.append(eventLoop.newSucceededFuture(result: ("body", Validation.Error.MissingValue())))
                    }
                } catch {
                    return eventLoop.newFailedFuture(error: error)
                }

                return self.reduce(
                    validators: validatorFutures,
                    on: eventLoop
                ).thenThrowing { errors in
                    guard errors.count == 0 else {
                        throw LGNC.E.DecodeError(errors)
                    }
                    return self.init(
                        token: _token,
                        IDPost: _IDPost,
                        IDReplyComment: _IDReplyComment,
                        body: _body
                    )
                }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDPost: try Request.extract(param: "IDPost", from: dictionary),
                    IDReplyComment: try Request.extract(param: "IDReplyComment", from: dictionary, isOptional: true),
                    body: try Request.extract(param: "body", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                    self.getDictionaryKey("IDReplyComment"): try self.encode(self.IDReplyComment),
                    self.getDictionaryKey("body"): try self.encode(self.body),
                ]
            }

            public static func validateToken(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>.Callback
            ) {
                self.validatorTokenClosure = callback
            }

            public static func validateIdpost(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback
            ) {
                self.validatorIdpostClosure = callback
            }

            public static func validateIdreplycomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdreplycommentAllowedValues>.Callback
            ) {
                self.validatorIdreplycommentClosure = callback
            }
        }
    }

    public struct Comments: Contract {
        public typealias ParentService = Services.Quorum

        public static let URI = "Comments"
        public static let visibility: ContractVisibility = .Private
        public static let transports: [LGNC.Transport] = [.LGNS, .HTTP]
        public static let contentTypes: [Services.ContentType] = [
            .MsgPack,
        ]

        public static func guarantee(_ callback: @escaping Callback) {
            Services.Quorum.guaranteeCommentsContract(callback)
        }

        public static func guarantee(_ callback: @escaping NonFutureCallback) {
            Services.Quorum.guaranteeCommentsContract(callback)
        }

        public final class Request: ContractEntity {
            public enum CallbackValidatorIdpostAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case PostNotFound = "Post not found"
                case PostIsReadOnly = "Post is read only"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .PostNotFound: return (message: self.rawValue, code: 404)
                    case .PostIsReadOnly: return (message: self.rawValue, code: 403)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "IDPost": "b",
            ]

            public let IDPost: Int

            private static var validatorIdpostClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback?

            public init(
                IDPost: Int
            ) {
                self.IDPost = IDPost
            }

            public static func initWithValidation(from dictionary: Entita.Dict, on eventLoop: EventLoop) -> Future<Request> {
                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "IDPost": [],
                ]

                var _IDPost: Int = Int()

                do {
                    do {
                        _IDPost = try Request.extract(param: "IDPost", from: dictionary)

                        if let validatorIdpostClosure = self.validatorIdpostClosure {
                            validatorFutures["IDPost"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>(callback: validatorIdpostClosure).validate(
                                    input: _IDPost,
                                    on: eventLoop
                                ).map { ("IDPost", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDPost"]!.append(eventLoop.newSucceededFuture(result: ("IDPost", Validation.Error.MissingValue())))
                    }
                } catch {
                    return eventLoop.newFailedFuture(error: error)
                }

                return self.reduce(
                    validators: validatorFutures,
                    on: eventLoop
                ).thenThrowing { errors in
                    guard errors.count == 0 else {
                        throw LGNC.E.DecodeError(errors)
                    }
                    return self.init(
                        IDPost: _IDPost
                    )
                }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    IDPost: try Request.extract(param: "IDPost", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                ]
            }

            public static func validateIdpost(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback
            ) {
                self.validatorIdpostClosure = callback
            }
        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "comments": "b",
            ]

            public let comments: [Comment]

            public init(
                comments: [Comment]
            ) {
                self.comments = comments
            }

            public static func initWithValidation(from dictionary: Entita.Dict, on eventLoop: EventLoop) -> Future<Response> {
                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "comments": [],
                ]

                var _comments: [Comment] = [Comment]()

                do {
                    do {
                        _comments = try Response.extract(param: "comments", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["comments"]!.append(eventLoop.newSucceededFuture(result: ("comments", Validation.Error.MissingValue())))
                    }
                } catch {
                    return eventLoop.newFailedFuture(error: error)
                }

                return self.reduce(
                    validators: validatorFutures,
                    on: eventLoop
                ).thenThrowing { errors in
                    guard errors.count == 0 else {
                        throw LGNC.E.DecodeError(errors)
                    }
                    return self.init(
                        comments: _comments
                    )
                }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    comments: try Response.extract(param: "comments", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("comments"): try self.encode(self.comments),
                ]
            }
        }
    }

    public struct Edit: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = Services.Shared.Comment

        public static let URI = "Edit"
        public static let visibility: ContractVisibility = .Private
        public static let transports: [LGNC.Transport] = [.LGNS, .HTTP]
        public static let contentTypes: [Services.ContentType] = [
            .MsgPack,
        ]

        public static func guarantee(_ callback: @escaping Callback) {
            Services.Quorum.guaranteeEditContract(callback)
        }

        public static func guarantee(_ callback: @escaping NonFutureCallback) {
            Services.Quorum.guaranteeEditContract(callback)
        }

        public final class Request: ContractEntity {
            public enum CallbackValidatorTokenAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = String

                case YouAreNotAuthorized = "You are not authorized"
                case YouAreForbiddenToLeaveCommentsHere = "You are forbidden to leave comments here"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .YouAreNotAuthorized: return (message: self.rawValue, code: 401)
                    case .YouAreForbiddenToLeaveCommentsHere: return (message: self.rawValue, code: 403)
                    }
                }
            }

            public enum CallbackValidatorIdpostAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case PostNotFound = "Post not found"
                case PostIsReadOnly = "Post is read only"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .PostNotFound: return (message: self.rawValue, code: 404)
                    case .PostIsReadOnly: return (message: self.rawValue, code: 403)
                    }
                }
            }

            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case ThisIsNotYourComment = "This is not your comment"
                case CommentNotFound = "Comment not found"
                case ThisCommentIsNotEditableAnymore = "This comment is not editable anymore"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .ThisIsNotYourComment: return (message: self.rawValue, code: 403)
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    case .ThisCommentIsNotEditableAnymore: return (message: self.rawValue, code: 408)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "token": "b",
                "IDPost": "c",
                "IDComment": "d",
                "body": "e",
            ]

            public let token: String
            public let IDPost: Int
            public let IDComment: Int
            public let body: String

            private static var validatorTokenClosure: Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>.Callback?
            private static var validatorIdpostClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback?
            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDPost: Int,
                IDComment: Int,
                body: String
            ) {
                self.token = token
                self.IDPost = IDPost
                self.IDComment = IDComment
                self.body = body
            }

            public static func initWithValidation(from dictionary: Entita.Dict, on eventLoop: EventLoop) -> Future<Request> {
                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDPost": [],
                    "IDComment": [],
                    "body": [],
                ]

                var _token: String = String()
                var _IDPost: Int = Int()
                var _IDComment: Int = Int()
                var _body: String = String()

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)

                        if let validatorTokenClosure = self.validatorTokenClosure {
                            validatorFutures["token"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>(callback: validatorTokenClosure).validate(
                                    input: _token,
                                    on: eventLoop
                                ).map { ("token", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.newSucceededFuture(result: ("token", Validation.Error.MissingValue())))
                    }
                    do {
                        _IDPost = try Request.extract(param: "IDPost", from: dictionary)

                        if let validatorIdpostClosure = self.validatorIdpostClosure {
                            validatorFutures["IDPost"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>(callback: validatorIdpostClosure).validate(
                                    input: _IDPost,
                                    on: eventLoop
                                ).map { ("IDPost", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDPost"]!.append(eventLoop.newSucceededFuture(result: ("IDPost", Validation.Error.MissingValue())))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    input: _IDComment,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.newSucceededFuture(result: ("IDComment", Validation.Error.MissingValue())))
                    }
                    do {
                        _body = try Request.extract(param: "body", from: dictionary)

                        if let error = Validation.Length.Min(length: 3, message: "Too short comment").validate(input: _body) {
                            validatorFutures["body"]!.append(eventLoop.newSucceededFuture(result: ("body", error)))
                        }

                        if let error = Validation.Length.Max(length: 4000, message: "Comment must be less than 4000 characters long").validate(input: _body) {
                            validatorFutures["body"]!.append(eventLoop.newSucceededFuture(result: ("body", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["body"]!.append(eventLoop.newSucceededFuture(result: ("body", Validation.Error.MissingValue())))
                    }
                } catch {
                    return eventLoop.newFailedFuture(error: error)
                }

                return self.reduce(
                    validators: validatorFutures,
                    on: eventLoop
                ).thenThrowing { errors in
                    guard errors.count == 0 else {
                        throw LGNC.E.DecodeError(errors)
                    }
                    return self.init(
                        token: _token,
                        IDPost: _IDPost,
                        IDComment: _IDComment,
                        body: _body
                    )
                }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDPost: try Request.extract(param: "IDPost", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary),
                    body: try Request.extract(param: "body", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                    self.getDictionaryKey("body"): try self.encode(self.body),
                ]
            }

            public static func validateToken(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>.Callback
            ) {
                self.validatorTokenClosure = callback
            }

            public static func validateIdpost(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback
            ) {
                self.validatorIdpostClosure = callback
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }

    public struct Delete: Contract {
        public typealias ParentService = Services.Quorum

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "Delete"
        public static let visibility: ContractVisibility = .Private
        public static let transports: [LGNC.Transport] = [.LGNS, .HTTP]
        public static let contentTypes: [Services.ContentType] = [
            .MsgPack,
        ]

        public static func guarantee(_ callback: @escaping Callback) {
            Services.Quorum.guaranteeDeleteContract(callback)
        }

        public static func guarantee(_ callback: @escaping NonFutureCallback) {
            Services.Quorum.guaranteeDeleteContract(callback)
        }

        public final class Request: ContractEntity {
            public enum CallbackValidatorTokenAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = String

                case YouAreNotAuthorized = "You are not authorized"
                case NotAdmin = "You are not admin :P"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .YouAreNotAuthorized: return (message: self.rawValue, code: 401)
                    case .NotAdmin: return (message: self.rawValue, code: 401)
                    }
                }
            }

            public enum CallbackValidatorIdpostAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case PostNotFound = "Post not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .PostNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public enum CallbackValidatorIdcommentAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = Int

                case CommentNotFound = "Comment not found"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .CommentNotFound: return (message: self.rawValue, code: 404)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "token": "b",
                "IDPost": "c",
                "IDComment": "d",
            ]

            public let token: String
            public let IDPost: Int
            public let IDComment: Int

            private static var validatorTokenClosure: Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>.Callback?
            private static var validatorIdpostClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback?
            private static var validatorIdcommentClosure: Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback?

            public init(
                token: String,
                IDPost: Int,
                IDComment: Int
            ) {
                self.token = token
                self.IDPost = IDPost
                self.IDComment = IDComment
            }

            public static func initWithValidation(from dictionary: Entita.Dict, on eventLoop: EventLoop) -> Future<Request> {
                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "IDPost": [],
                    "IDComment": [],
                ]

                var _token: String = String()
                var _IDPost: Int = Int()
                var _IDComment: Int = Int()

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)

                        if let validatorTokenClosure = self.validatorTokenClosure {
                            validatorFutures["token"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>(callback: validatorTokenClosure).validate(
                                    input: _token,
                                    on: eventLoop
                                ).map { ("token", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.newSucceededFuture(result: ("token", Validation.Error.MissingValue())))
                    }
                    do {
                        _IDPost = try Request.extract(param: "IDPost", from: dictionary)

                        if let validatorIdpostClosure = self.validatorIdpostClosure {
                            validatorFutures["IDPost"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>(callback: validatorIdpostClosure).validate(
                                    input: _IDPost,
                                    on: eventLoop
                                ).map { ("IDPost", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDPost"]!.append(eventLoop.newSucceededFuture(result: ("IDPost", Validation.Error.MissingValue())))
                    }
                    do {
                        _IDComment = try Request.extract(param: "IDComment", from: dictionary)

                        if let validatorIdcommentClosure = self.validatorIdcommentClosure {
                            validatorFutures["IDComment"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>(callback: validatorIdcommentClosure).validate(
                                    input: _IDComment,
                                    on: eventLoop
                                ).map { ("IDComment", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDComment"]!.append(eventLoop.newSucceededFuture(result: ("IDComment", Validation.Error.MissingValue())))
                    }
                } catch {
                    return eventLoop.newFailedFuture(error: error)
                }

                return self.reduce(
                    validators: validatorFutures,
                    on: eventLoop
                ).thenThrowing { errors in
                    guard errors.count == 0 else {
                        throw LGNC.E.DecodeError(errors)
                    }
                    return self.init(
                        token: _token,
                        IDPost: _IDPost,
                        IDComment: _IDComment
                    )
                }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    IDPost: try Request.extract(param: "IDPost", from: dictionary),
                    IDComment: try Request.extract(param: "IDComment", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("IDPost"): try self.encode(self.IDPost),
                    self.getDictionaryKey("IDComment"): try self.encode(self.IDComment),
                ]
            }

            public static func validateToken(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorTokenAllowedValues>.Callback
            ) {
                self.validatorTokenClosure = callback
            }

            public static func validateIdpost(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdpostAllowedValues>.Callback
            ) {
                self.validatorIdpostClosure = callback
            }

            public static func validateIdcomment(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorIdcommentAllowedValues>.Callback
            ) {
                self.validatorIdcommentClosure = callback
            }
        }
    }
}
