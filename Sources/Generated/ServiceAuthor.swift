/**
 * This file has been autogenerated by LGNC assembler on 2019-06-23 20:05:27.870634.
 * All changes will be lost on next assembly.
 */

import Entita
import Foundation
import LGNC
import LGNCore
import LGNP
import LGNS
import NIO

public extension Services {
    struct Author: Service {
        public static let transports: [LGNCore.Transport: Int] = [
            .LGNS: 1711,
            .HTTP: 8080,
        ]

        public struct Contracts {}

        public static let info: [String: String] = [
            "ElderName": "hudruk",
        ]
        public static var guaranteeStatuses: [String: Bool] = [
            Contracts.Checkin.URI: Contracts.Checkin.isGuaranteed,
            Contracts.Ping.URI: Contracts.Ping.isGuaranteed,
            Contracts.RaiseEvent.URI: Contracts.RaiseEvent.isGuaranteed,
            Contracts.AnnounceEvent.URI: Contracts.AnnounceEvent.isGuaranteed,
            Contracts.Login.URI: Contracts.Login.isGuaranteed,
            Contracts.InternalLogin.URI: Contracts.InternalLogin.isGuaranteed,
            Contracts.UserInfo.URI: Contracts.UserInfo.isGuaranteed,
            Contracts.UserInfoInternal.URI: Contracts.UserInfoInternal.isGuaranteed,
            Contracts.Authenticate.URI: Contracts.Authenticate.isGuaranteed,
            Contracts.ChangePassword.URI: Contracts.ChangePassword.isGuaranteed,
            Contracts.ValidateEmail.URI: Contracts.ValidateEmail.isGuaranteed,
            Contracts.ResendValidationEmail.URI: Contracts.ResendValidationEmail.isGuaranteed,
            Contracts.ResetPasswordStep1.URI: Contracts.ResetPasswordStep1.isGuaranteed,
            Contracts.ResetPasswordStep2.URI: Contracts.ResetPasswordStep2.isGuaranteed,
            Contracts.InternalSignup.URI: Contracts.InternalSignup.isGuaranteed,
            Contracts.Signup.URI: Contracts.Signup.isGuaranteed,
        ]

        public static let contractMap: [String: SomeContract.Type] = [
            Contracts.Checkin.URI: Contracts.Checkin.self,
            Contracts.Ping.URI: Contracts.Ping.self,
            Contracts.RaiseEvent.URI: Contracts.RaiseEvent.self,
            Contracts.AnnounceEvent.URI: Contracts.AnnounceEvent.self,
            Contracts.Login.URI: Contracts.Login.self,
            Contracts.InternalLogin.URI: Contracts.InternalLogin.self,
            Contracts.UserInfo.URI: Contracts.UserInfo.self,
            Contracts.UserInfoInternal.URI: Contracts.UserInfoInternal.self,
            Contracts.Authenticate.URI: Contracts.Authenticate.self,
            Contracts.ChangePassword.URI: Contracts.ChangePassword.self,
            Contracts.ValidateEmail.URI: Contracts.ValidateEmail.self,
            Contracts.ResendValidationEmail.URI: Contracts.ResendValidationEmail.self,
            Contracts.ResetPasswordStep1.URI: Contracts.ResetPasswordStep1.self,
            Contracts.ResetPasswordStep2.URI: Contracts.ResetPasswordStep2.self,
            Contracts.InternalSignup.URI: Contracts.InternalSignup.self,
            Contracts.Signup.URI: Contracts.Signup.self,
        ]

        public static let keyDictionary: [String: Entita.Dict] = [
            "Checkin": [
                "Request": Contracts.Checkin.Request.keyDictionary,
                "Response": Contracts.Checkin.Response.keyDictionary,
            ],
            "Ping": [
                "Request": Contracts.Ping.Request.keyDictionary,
                "Response": Contracts.Ping.Response.keyDictionary,
            ],
            "RaiseEvent": [
                "Request": Contracts.RaiseEvent.Request.keyDictionary,
                "Response": Contracts.RaiseEvent.Response.keyDictionary,
            ],
            "AnnounceEvent": [
                "Request": Contracts.AnnounceEvent.Request.keyDictionary,
                "Response": Contracts.AnnounceEvent.Response.keyDictionary,
            ],
            "Login": [
                "Request": Contracts.Login.Request.keyDictionary,
                "Response": Contracts.Login.Response.keyDictionary,
            ],
            "InternalLogin": [
                "Request": Contracts.InternalLogin.Request.keyDictionary,
                "Response": Contracts.InternalLogin.Response.keyDictionary,
            ],
            "UserInfo": [
                "Request": Contracts.UserInfo.Request.keyDictionary,
                "Response": Contracts.UserInfo.Response.keyDictionary,
            ],
            "UserInfoInternal": [
                "Request": Contracts.UserInfoInternal.Request.keyDictionary,
                "Response": Contracts.UserInfoInternal.Response.keyDictionary,
            ],
            "Authenticate": [
                "Request": Contracts.Authenticate.Request.keyDictionary,
                "Response": Contracts.Authenticate.Response.keyDictionary,
            ],
            "ChangePassword": [
                "Request": Contracts.ChangePassword.Request.keyDictionary,
                "Response": Contracts.ChangePassword.Response.keyDictionary,
            ],
            "ValidateEmail": [
                "Request": Contracts.ValidateEmail.Request.keyDictionary,
                "Response": Contracts.ValidateEmail.Response.keyDictionary,
            ],
            "ResendValidationEmail": [
                "Request": Contracts.ResendValidationEmail.Request.keyDictionary,
                "Response": Contracts.ResendValidationEmail.Response.keyDictionary,
            ],
            "ResetPasswordStep1": [
                "Request": Contracts.ResetPasswordStep1.Request.keyDictionary,
                "Response": Contracts.ResetPasswordStep1.Response.keyDictionary,
            ],
            "ResetPasswordStep2": [
                "Request": Contracts.ResetPasswordStep2.Request.keyDictionary,
                "Response": Contracts.ResetPasswordStep2.Response.keyDictionary,
            ],
            "InternalSignup": [
                "Request": Contracts.InternalSignup.Request.keyDictionary,
                "Response": Contracts.InternalSignup.Response.keyDictionary,
            ],
            "Signup": [
                "Request": Contracts.Signup.Request.keyDictionary,
                "Response": Contracts.Signup.Response.keyDictionary,
            ],
        ]
    }
}

public extension Services.Author.Contracts {
    typealias FieldMapping = Services.Shared.FieldMapping
    typealias ServiceFieldMapping = Services.Shared.ServiceFieldMapping
    typealias ServiceFieldMappings = Services.Shared.ServiceFieldMappings
    typealias CharacterInfo = Services.Shared.CharacterInfo
    typealias EventRequest = Services.Shared.EventRequest
    typealias UserSignupRequest = Services.Shared.UserSignupRequest
    typealias NodeInfo = Services.Shared.NodeInfo
    typealias PingRequest = Services.Shared.PingRequest
    typealias PingResponse = Services.Shared.PingResponse
    typealias CheckinRequest = Services.Shared.CheckinRequest
    typealias CheckinResponse = Services.Shared.CheckinResponse
    typealias LoginRequest = Services.Shared.LoginRequest
    typealias LoginResponse = Services.Shared.LoginResponse
    typealias CommentUserInfo = Services.Shared.CommentUserInfo
    typealias Empty = Services.Shared.Empty
    typealias Comment = Services.Shared.Comment
    typealias User = Services.Shared.User

    struct Checkin: Contract {
        public typealias ParentService = Services.Author

        public typealias Request = Services.Shared.CheckinRequest
        public typealias Response = Services.Shared.CheckinResponse

        public static let URI = "Checkin"
        public static let transports: [LGNCore.Transport] = [.LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private
    }

    struct Ping: Contract {
        public typealias ParentService = Services.Author

        public typealias Request = Services.Shared.PingRequest
        public typealias Response = Services.Shared.PingResponse

        public static let URI = "Ping"
        public static let transports: [LGNCore.Transport] = [.LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private
    }

    struct RaiseEvent: Contract {
        public typealias ParentService = Services.Author

        public typealias Request = Services.Shared.EventRequest
        public typealias Response = LGNC.Entity.Empty

        public static let URI = "RaiseEvent"
        public static let transports: [LGNCore.Transport] = [.LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private
    }

    struct AnnounceEvent: Contract {
        public typealias ParentService = Services.Author

        public typealias Request = Services.Shared.EventRequest
        public typealias Response = LGNC.Entity.Empty

        public static let URI = "AnnounceEvent"
        public static let transports: [LGNCore.Transport] = [.LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private
    }

    struct Login: Contract {
        public typealias ParentService = Services.Author

        public typealias Request = Services.Shared.LoginRequest
        public typealias Response = Services.Shared.LoginResponse

        public static let URI = "Login"
        public static let transports: [LGNCore.Transport] = [.HTTP, .LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private
    }

    struct InternalLogin: Contract {
        public typealias ParentService = Services.Author

        public typealias Request = Services.Shared.LoginRequest
        public typealias Response = Services.Shared.LoginResponse

        public static let URI = "InternalLogin"
        public static let transports: [LGNCore.Transport] = [.LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private
    }

    struct UserInfo: Contract {
        public typealias ParentService = Services.Author

        public static let URI = "UserInfo"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "ID": "a",
            ]

            public var ID: String

            public init(
                ID: String
            ) {
                self.ID = ID
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "ID": [],
                ]

                var _ID: String = String()

                do {
                    do {
                        _ID = try Request.extract(param: "ID", from: dictionary)

                        if let error = Validation.UUID().validate(_ID, requestInfo.locale) {
                            validatorFutures["ID"]!.append(eventLoop.makeSucceededFuture(("ID", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["ID"]!.append(eventLoop.makeSucceededFuture(("ID", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            ID: _ID
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    ID: try Request.extract(param: "ID", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("ID"): try self.encode(self.ID),
                ]
            }
        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "ID": "a",
                "username": "c",
                "sex": "d",
                "isBanned": "e",
                "accessLevel": "f",
            ]

            public var ID: String
            public var username: String
            public let sex: String
            public var isBanned: Bool
            public var accessLevel: String

            public init(
                ID: String,
                username: String,
                sex: String,
                isBanned: Bool,
                accessLevel: String
            ) {
                self.ID = ID
                self.username = username
                self.sex = sex
                self.isBanned = isBanned
                self.accessLevel = accessLevel
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Response> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "ID": [],
                    "username": [],
                    "sex": [],
                    "isBanned": [],
                    "accessLevel": [],
                ]

                var _ID: String = String()
                var _username: String = String()
                var _sex: String = String()
                var _isBanned: Bool = Bool()
                var _accessLevel: String = String()

                do {
                    do {
                        _ID = try Response.extract(param: "ID", from: dictionary)

                        if let error = Validation.UUID().validate(_ID, requestInfo.locale) {
                            validatorFutures["ID"]!.append(eventLoop.makeSucceededFuture(("ID", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["ID"]!.append(eventLoop.makeSucceededFuture(("ID", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _username = try Response.extract(param: "username", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["username"]!.append(eventLoop.makeSucceededFuture(("username", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _sex = try Response.extract(param: "sex", from: dictionary)

                        if let error = Validation.In(allowedValues: ["Male", "Female", "Attack helicopter"]).validate(_sex, requestInfo.locale) {
                            validatorFutures["sex"]!.append(eventLoop.makeSucceededFuture(("sex", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["sex"]!.append(eventLoop.makeSucceededFuture(("sex", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _isBanned = try Response.extract(param: "isBanned", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["isBanned"]!.append(eventLoop.makeSucceededFuture(("isBanned", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _accessLevel = try Response.extract(param: "accessLevel", from: dictionary)

                        if let error = Validation.In(allowedValues: ["User", "Moderator", "Admin"]).validate(_accessLevel, requestInfo.locale) {
                            validatorFutures["accessLevel"]!.append(eventLoop.makeSucceededFuture(("accessLevel", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["accessLevel"]!.append(eventLoop.makeSucceededFuture(("accessLevel", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            ID: _ID,
                            username: _username,
                            sex: _sex,
                            isBanned: _isBanned,
                            accessLevel: _accessLevel
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    ID: try Response.extract(param: "ID", from: dictionary),
                    username: try Response.extract(param: "username", from: dictionary),
                    sex: try Response.extract(param: "sex", from: dictionary),
                    isBanned: try Response.extract(param: "isBanned", from: dictionary),
                    accessLevel: try Response.extract(param: "accessLevel", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("ID"): try self.encode(self.ID),
                    self.getDictionaryKey("username"): try self.encode(self.username),
                    self.getDictionaryKey("sex"): try self.encode(self.sex),
                    self.getDictionaryKey("isBanned"): try self.encode(self.isBanned),
                    self.getDictionaryKey("accessLevel"): try self.encode(self.accessLevel),
                ]
            }
        }
    }

    struct UserInfoInternal: Contract {
        public typealias ParentService = Services.Author

        public typealias Response = Services.Shared.User

        public static let URI = "UserInfoInternal"
        public static let transports: [LGNCore.Transport] = [.LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "ID": "a",
            ]

            public var ID: String

            public init(
                ID: String
            ) {
                self.ID = ID
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "ID": [],
                ]

                var _ID: String = String()

                do {
                    do {
                        _ID = try Request.extract(param: "ID", from: dictionary)

                        if let error = Validation.UUID().validate(_ID, requestInfo.locale) {
                            validatorFutures["ID"]!.append(eventLoop.makeSucceededFuture(("ID", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["ID"]!.append(eventLoop.makeSucceededFuture(("ID", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            ID: _ID
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    ID: try Request.extract(param: "ID", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("ID"): try self.encode(self.ID),
                ]
            }
        }
    }

    struct Authenticate: Contract {
        public typealias ParentService = Services.Author

        public static let URI = "Authenticate"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "portal": "b",
                "token": "c",
            ]

            public let portal: String
            public let token: String

            public init(
                portal: String,
                token: String
            ) {
                self.portal = portal
                self.token = token
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "portal": [],
                    "token": [],
                ]

                var _portal: String = String()
                var _token: String = String()

                do {
                    do {
                        _portal = try Request.extract(param: "portal", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["portal"]!.append(eventLoop.makeSucceededFuture(("portal", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            portal: _portal,
                            token: _token
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    portal: try Request.extract(param: "portal", from: dictionary),
                    token: try Request.extract(param: "token", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("portal"): try self.encode(self.portal),
                    self.getDictionaryKey("token"): try self.encode(self.token),
                ]
            }
        }

        public final class Response: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "IDUser": "b",
            ]

            public let IDUser: String?

            public init(
                IDUser: String? = nil
            ) {
                self.IDUser = IDUser
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Response> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "IDUser": [],
                ]

                var _IDUser: String?

                do {
                    do {
                        _IDUser = try Response.extract(param: "IDUser", from: dictionary, isOptional: true)
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDUser"]!.append(eventLoop.makeSucceededFuture(("IDUser", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            IDUser: _IDUser
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    IDUser: try Response.extract(param: "IDUser", from: dictionary, isOptional: true)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("IDUser"): try self.encode(self.IDUser),
                ]
            }
        }
    }

    struct ChangePassword: Contract {
        public typealias ParentService = Services.Author

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "ChangePassword"
        public static let transports: [LGNCore.Transport] = [.LGNS, .HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "token": "b",
                "password1": "c",
                "password2": "d",
            ]

            public let token: String
            public let password1: String
            public let password2: String

            public init(
                token: String,
                password1: String,
                password2: String
            ) {
                self.token = token
                self.password1 = password1
                self.password2 = password2
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "token": [],
                    "password1": [],
                    "password2": [],
                ]

                var _token: String = String()
                var _password1: String = String()
                var _password2: String = String()

                do {
                    do {
                        _token = try Request.extract(param: "token", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["token"]!.append(eventLoop.makeSucceededFuture(("token", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _password1 = try Request.extract(param: "password1", from: dictionary)

                        if let error = Validation.Length.Min(length: 6, message: "Password must be at least {Length} characters long").validate(_password1, requestInfo.locale) {
                            validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", error)))
                        }

                        if let error = Validation.Length.Max(length: 64, message: "Password must be less than {Length} characters long").validate(_password1, requestInfo.locale) {
                            validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _password2 = try Request.extract(param: "password2", from: dictionary)

                        if let error = Validation.Identical(right: _password1, message: "Passwords must match").validate(_password2, requestInfo.locale) {
                            validatorFutures["password2"]!.append(eventLoop.makeSucceededFuture(("password2", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["password2"]!.append(eventLoop.makeSucceededFuture(("password2", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            token: _token,
                            password1: _password1,
                            password2: _password2
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    token: try Request.extract(param: "token", from: dictionary),
                    password1: try Request.extract(param: "password1", from: dictionary),
                    password2: try Request.extract(param: "password2", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("token"): try self.encode(self.token),
                    self.getDictionaryKey("password1"): try self.encode(self.password1),
                    self.getDictionaryKey("password2"): try self.encode(self.password2),
                ]
            }
        }
    }

    struct ValidateEmail: Contract {
        public typealias ParentService = Services.Author

        public typealias Response = Services.Shared.LoginResponse

        public static let URI = "ValidateEmail"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "node": "b",
                "validationToken": "c",
                "IDUser": "d",
            ]

            public let node: String
            public let validationToken: String
            public var IDUser: String

            public init(
                node: String,
                validationToken: String,
                IDUser: String
            ) {
                self.node = node
                self.validationToken = validationToken
                self.IDUser = IDUser
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "node": [],
                    "validationToken": [],
                    "IDUser": [],
                ]

                var _node: String = String()
                var _validationToken: String = String()
                var _IDUser: String = String()

                do {
                    do {
                        _node = try Request.extract(param: "node", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["node"]!.append(eventLoop.makeSucceededFuture(("node", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _validationToken = try Request.extract(param: "validationToken", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["validationToken"]!.append(eventLoop.makeSucceededFuture(("validationToken", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _IDUser = try Request.extract(param: "IDUser", from: dictionary)

                        if let error = Validation.UUID().validate(_IDUser, requestInfo.locale) {
                            validatorFutures["IDUser"]!.append(eventLoop.makeSucceededFuture(("IDUser", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDUser"]!.append(eventLoop.makeSucceededFuture(("IDUser", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            node: _node,
                            validationToken: _validationToken,
                            IDUser: _IDUser
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    node: try Request.extract(param: "node", from: dictionary),
                    validationToken: try Request.extract(param: "validationToken", from: dictionary),
                    IDUser: try Request.extract(param: "IDUser", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("node"): try self.encode(self.node),
                    self.getDictionaryKey("validationToken"): try self.encode(self.validationToken),
                    self.getDictionaryKey("IDUser"): try self.encode(self.IDUser),
                ]
            }
        }
    }

    struct ResendValidationEmail: Contract {
        public typealias ParentService = Services.Author

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "ResendValidationEmail"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "email": "b",
                "recaptchaToken": "c",
            ]

            public let email: String
            public let recaptchaToken: String

            public init(
                email: String,
                recaptchaToken: String
            ) {
                self.email = email
                self.recaptchaToken = recaptchaToken
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "email": [],
                    "recaptchaToken": [],
                ]

                var _email: String = String()
                var _recaptchaToken: String = String()

                do {
                    do {
                        _email = try Request.extract(param: "email", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["email"]!.append(eventLoop.makeSucceededFuture(("email", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _recaptchaToken = try Request.extract(param: "recaptchaToken", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["recaptchaToken"]!.append(eventLoop.makeSucceededFuture(("recaptchaToken", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            email: _email,
                            recaptchaToken: _recaptchaToken
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    email: try Request.extract(param: "email", from: dictionary),
                    recaptchaToken: try Request.extract(param: "recaptchaToken", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("email"): try self.encode(self.email),
                    self.getDictionaryKey("recaptchaToken"): try self.encode(self.recaptchaToken),
                ]
            }
        }
    }

    struct ResetPasswordStep1: Contract {
        public typealias ParentService = Services.Author

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "ResetPasswordStep1"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "email": "b",
                "recaptchaToken": "c",
            ]

            public let email: String
            public let recaptchaToken: String

            public init(
                email: String,
                recaptchaToken: String
            ) {
                self.email = email
                self.recaptchaToken = recaptchaToken
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "email": [],
                    "recaptchaToken": [],
                ]

                var _email: String = String()
                var _recaptchaToken: String = String()

                do {
                    do {
                        _email = try Request.extract(param: "email", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["email"]!.append(eventLoop.makeSucceededFuture(("email", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _recaptchaToken = try Request.extract(param: "recaptchaToken", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["recaptchaToken"]!.append(eventLoop.makeSucceededFuture(("recaptchaToken", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            email: _email,
                            recaptchaToken: _recaptchaToken
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    email: try Request.extract(param: "email", from: dictionary),
                    recaptchaToken: try Request.extract(param: "recaptchaToken", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("email"): try self.encode(self.email),
                    self.getDictionaryKey("recaptchaToken"): try self.encode(self.recaptchaToken),
                ]
            }
        }
    }

    struct ResetPasswordStep2: Contract {
        public typealias ParentService = Services.Author

        public typealias Response = Services.Shared.LoginResponse

        public static let URI = "ResetPasswordStep2"
        public static let transports: [LGNCore.Transport] = [.HTTP]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public static let keyDictionary: [String: String] = [
                "validationToken": "b",
                "IDUser": "c",
                "password1": "d",
                "password2": "e",
            ]

            public let validationToken: String
            public var IDUser: String
            public let password1: String
            public let password2: String

            public init(
                validationToken: String,
                IDUser: String,
                password1: String,
                password2: String
            ) {
                self.validationToken = validationToken
                self.IDUser = IDUser
                self.password1 = password1
                self.password2 = password2
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "validationToken": [],
                    "IDUser": [],
                    "password1": [],
                    "password2": [],
                ]

                var _validationToken: String = String()
                var _IDUser: String = String()
                var _password1: String = String()
                var _password2: String = String()

                do {
                    do {
                        _validationToken = try Request.extract(param: "validationToken", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["validationToken"]!.append(eventLoop.makeSucceededFuture(("validationToken", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _IDUser = try Request.extract(param: "IDUser", from: dictionary)

                        if let error = Validation.UUID().validate(_IDUser, requestInfo.locale) {
                            validatorFutures["IDUser"]!.append(eventLoop.makeSucceededFuture(("IDUser", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["IDUser"]!.append(eventLoop.makeSucceededFuture(("IDUser", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _password1 = try Request.extract(param: "password1", from: dictionary)

                        if let error = Validation.Length.Min(length: 6, message: "Password must be at least {Length} characters long").validate(_password1, requestInfo.locale) {
                            validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", error)))
                        }

                        if let error = Validation.Length.Max(length: 64, message: "Password must be less than {Length} characters long").validate(_password1, requestInfo.locale) {
                            validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _password2 = try Request.extract(param: "password2", from: dictionary)

                        if let error = Validation.Identical(right: _password1, message: "Passwords must match").validate(_password2, requestInfo.locale) {
                            validatorFutures["password2"]!.append(eventLoop.makeSucceededFuture(("password2", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["password2"]!.append(eventLoop.makeSucceededFuture(("password2", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            validationToken: _validationToken,
                            IDUser: _IDUser,
                            password1: _password1,
                            password2: _password2
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    validationToken: try Request.extract(param: "validationToken", from: dictionary),
                    IDUser: try Request.extract(param: "IDUser", from: dictionary),
                    password1: try Request.extract(param: "password1", from: dictionary),
                    password2: try Request.extract(param: "password2", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("validationToken"): try self.encode(self.validationToken),
                    self.getDictionaryKey("IDUser"): try self.encode(self.IDUser),
                    self.getDictionaryKey("password1"): try self.encode(self.password1),
                    self.getDictionaryKey("password2"): try self.encode(self.password2),
                ]
            }
        }
    }

    struct InternalSignup: Contract {
        public typealias ParentService = Services.Author

        public typealias Response = LGNC.Entity.Empty

        public static let URI = "InternalSignup"
        public static let transports: [LGNCore.Transport] = [.LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private

        public final class Request: ContractEntity {
            public enum CallbackValidatorUsernameAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = String

                case UserWithGivenUsernameAlreadyExists = "User with given username already exists"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .UserWithGivenUsernameAlreadyExists: return (message: self.rawValue, code: 10001)
                    }
                }
            }

            public enum CallbackValidatorEmailAllowedValues: String, CallbackWithAllowedValuesRepresentable, ValidatorErrorRepresentable {
                public typealias InputValue = String

                case UserWithGivenEmailAlreadyExists = "User with given email already exists"

                public func getErrorTuple() -> (message: String, code: Int) {
                    switch self {
                    case .UserWithGivenEmailAlreadyExists: return (message: self.rawValue, code: 10001)
                    }
                }
            }

            public static let keyDictionary: [String: String] = [
                "username": "b",
                "email": "c",
                "password1": "d",
                "password2": "e",
                "sex": "f",
                "language": "g",
                "recaptchaToken": "h",
                "ip": "i",
                "userAgent": "j",
                "country": "k",
            ]

            public let username: String
            public let email: String
            public let password1: String
            public let password2: String
            public let sex: String
            public let language: String
            public let recaptchaToken: String
            public let ip: String
            public let userAgent: String
            public let country: String

            private static var validatorUsernameClosure: Validation.CallbackWithAllowedValues<CallbackValidatorUsernameAllowedValues>.Callback?
            private static var validatorEmailClosure: Validation.CallbackWithAllowedValues<CallbackValidatorEmailAllowedValues>.Callback?

            public init(
                username: String,
                email: String,
                password1: String,
                password2: String,
                sex: String,
                language: String,
                recaptchaToken: String,
                ip: String,
                userAgent: String,
                country: String
            ) {
                self.username = username
                self.email = email
                self.password1 = password1
                self.password2 = password2
                self.sex = sex
                self.language = language
                self.recaptchaToken = recaptchaToken
                self.ip = ip
                self.userAgent = userAgent
                self.country = country
            }

            public static func initWithValidation(from dictionary: Entita.Dict, requestInfo: LGNCore.RequestInfo) -> Future<Request> {
                let eventLoop = requestInfo.eventLoop

                var validatorFutures: [String: [Future<(String, ValidatorError?)>]] = [
                    "username": [],
                    "email": [],
                    "password1": [],
                    "password2": [],
                    "sex": [],
                    "language": [],
                    "recaptchaToken": [],
                    "ip": [],
                    "userAgent": [],
                    "country": [],
                ]

                var _username: String = String()
                var _email: String = String()
                var _password1: String = String()
                var _password2: String = String()
                var _sex: String = String()
                var _language: String = String()
                var _recaptchaToken: String = String()
                var _ip: String = String()
                var _userAgent: String = String()
                var _country: String = String()

                do {
                    do {
                        _username = try Request.extract(param: "username", from: dictionary)

                        if let error = Validation.Regexp(pattern: "^[a-zA-Zа-яА-Я0-9_\\- ]+$", message: "Username must only consist of letters, numbers and underscores").validate(_username, requestInfo.locale) {
                            validatorFutures["username"]!.append(eventLoop.makeSucceededFuture(("username", error)))
                        }

                        if let error = Validation.Length.Min(length: 3).validate(_username, requestInfo.locale) {
                            validatorFutures["username"]!.append(eventLoop.makeSucceededFuture(("username", error)))
                        }

                        if let error = Validation.Length.Max(length: 24).validate(_username, requestInfo.locale) {
                            validatorFutures["username"]!.append(eventLoop.makeSucceededFuture(("username", error)))
                        }

                        if let validatorUsernameClosure = self.validatorUsernameClosure {
                            validatorFutures["username"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorUsernameAllowedValues>(callback: validatorUsernameClosure).validate(
                                    _username,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("username", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["username"]!.append(eventLoop.makeSucceededFuture(("username", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _email = try Request.extract(param: "email", from: dictionary)

                        if let error = Validation.Regexp(pattern: "^.+@.+\\..+$", message: "Invalid email format").validate(_email, requestInfo.locale) {
                            validatorFutures["email"]!.append(eventLoop.makeSucceededFuture(("email", error)))
                        }

                        if let validatorEmailClosure = self.validatorEmailClosure {
                            validatorFutures["email"]!.append(
                                Validation.CallbackWithAllowedValues<CallbackValidatorEmailAllowedValues>(callback: validatorEmailClosure).validate(
                                    _email,
                                    requestInfo.locale,
                                    on: eventLoop
                                ).map { ("email", $0) }
                            )
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["email"]!.append(eventLoop.makeSucceededFuture(("email", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _password1 = try Request.extract(param: "password1", from: dictionary)

                        if let error = Validation.Length.Min(length: 6, message: "Password must be at least {Length} characters long").validate(_password1, requestInfo.locale) {
                            validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", error)))
                        }

                        if let error = Validation.Length.Max(length: 64, message: "Password must be less than {Length} characters long").validate(_password1, requestInfo.locale) {
                            validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["password1"]!.append(eventLoop.makeSucceededFuture(("password1", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _password2 = try Request.extract(param: "password2", from: dictionary)

                        if let error = Validation.Identical(right: _password1, message: "Passwords must match").validate(_password2, requestInfo.locale) {
                            validatorFutures["password2"]!.append(eventLoop.makeSucceededFuture(("password2", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["password2"]!.append(eventLoop.makeSucceededFuture(("password2", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _sex = try Request.extract(param: "sex", from: dictionary)

                        if let error = Validation.In(allowedValues: ["Male", "Female", "Attack helicopter"]).validate(_sex, requestInfo.locale) {
                            validatorFutures["sex"]!.append(eventLoop.makeSucceededFuture(("sex", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["sex"]!.append(eventLoop.makeSucceededFuture(("sex", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _language = try Request.extract(param: "language", from: dictionary)

                        if let error = Validation.In(allowedValues: ["en", "ru"]).validate(_language, requestInfo.locale) {
                            validatorFutures["language"]!.append(eventLoop.makeSucceededFuture(("language", error)))
                        }
                    } catch Entita.E.ExtractError {
                        validatorFutures["language"]!.append(eventLoop.makeSucceededFuture(("language", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _recaptchaToken = try Request.extract(param: "recaptchaToken", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["recaptchaToken"]!.append(eventLoop.makeSucceededFuture(("recaptchaToken", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _ip = try Request.extract(param: "ip", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["ip"]!.append(eventLoop.makeSucceededFuture(("ip", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _userAgent = try Request.extract(param: "userAgent", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["userAgent"]!.append(eventLoop.makeSucceededFuture(("userAgent", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                    do {
                        _country = try Request.extract(param: "country", from: dictionary)
                    } catch Entita.E.ExtractError {
                        validatorFutures["country"]!.append(eventLoop.makeSucceededFuture(("country", Validation.Error.MissingValue(requestInfo.locale))))
                    }
                } catch {
                    return eventLoop.makeFailedFuture(error)
                }

                return self
                    .reduce(validators: validatorFutures, on: eventLoop)
                    .flatMapThrowing { errors in
                        guard errors.count == 0 else {
                            throw LGNC.E.DecodeError(errors)
                        }
                        return self.init(
                            username: _username,
                            email: _email,
                            password1: _password1,
                            password2: _password2,
                            sex: _sex,
                            language: _language,
                            recaptchaToken: _recaptchaToken,
                            ip: _ip,
                            userAgent: _userAgent,
                            country: _country
                        )
                    }
            }

            public convenience init(from dictionary: Entita.Dict) throws {
                self.init(
                    username: try Request.extract(param: "username", from: dictionary),
                    email: try Request.extract(param: "email", from: dictionary),
                    password1: try Request.extract(param: "password1", from: dictionary),
                    password2: try Request.extract(param: "password2", from: dictionary),
                    sex: try Request.extract(param: "sex", from: dictionary),
                    language: try Request.extract(param: "language", from: dictionary),
                    recaptchaToken: try Request.extract(param: "recaptchaToken", from: dictionary),
                    ip: try Request.extract(param: "ip", from: dictionary),
                    userAgent: try Request.extract(param: "userAgent", from: dictionary),
                    country: try Request.extract(param: "country", from: dictionary)
                )
            }

            public func getDictionary() throws -> Entita.Dict {
                return [
                    self.getDictionaryKey("username"): try self.encode(self.username),
                    self.getDictionaryKey("email"): try self.encode(self.email),
                    self.getDictionaryKey("password1"): try self.encode(self.password1),
                    self.getDictionaryKey("password2"): try self.encode(self.password2),
                    self.getDictionaryKey("sex"): try self.encode(self.sex),
                    self.getDictionaryKey("language"): try self.encode(self.language),
                    self.getDictionaryKey("recaptchaToken"): try self.encode(self.recaptchaToken),
                    self.getDictionaryKey("ip"): try self.encode(self.ip),
                    self.getDictionaryKey("userAgent"): try self.encode(self.userAgent),
                    self.getDictionaryKey("country"): try self.encode(self.country),
                ]
            }

            public static func validateUsername(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorUsernameAllowedValues>.Callback
            ) {
                self.validatorUsernameClosure = callback
            }

            public static func validateEmail(
                _ callback: @escaping Validation.CallbackWithAllowedValues<CallbackValidatorEmailAllowedValues>.Callback
            ) {
                self.validatorEmailClosure = callback
            }
        }
    }

    struct Signup: Contract {
        public typealias ParentService = Services.Author

        public typealias Request = Services.Shared.UserSignupRequest
        public typealias Response = LGNC.Entity.Empty

        public static let URI = "Signup"
        public static let transports: [LGNCore.Transport] = [.HTTP, .LGNS]
        public static var guaranteeClosure: Optional < (Entity, LGNCore.RequestInfo) -> Future < Entity>> = nil
        public static let contentTypes: [LGNCore.ContentType] = LGNCore.ContentType.all

        static let visibility: ContractVisibility = .Private
    }
}
